class Solution:
  def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
    # Disjoint Set

    def find(x: int) -> int:
      nonlocal fa
      if fa[x] != x:
        fa[x] = find(fa[x])
      return fa[x]

    def merge(x: int, y: int) -> None:
      nonlocal fa, w
      x = find(x)
      y = find(y)
      if x != y:
        fa[x] = y
        w[y] += w[x]

    n = len(graph)

    fa = [i for i in range(n)]
    w = [1] * n

    for i in range(n):
      for j in range(i+1, n):
        if graph[i][j]:
          merge(i, j)

    judge = [False] * n

    initial.sort()
    ans, cur = initial[0], 0

    for u in initial:
      if judge[u]:
        continue

      judge[u] = True
      v = find(u)
      if w[v] > cur:
        bug = False
        for x in initial:
          if x != u and not judge[x]:
            if find(x) == v:
              judge[x] = True
              bug = True
        if not bug:
          cur = w[v]
          ans = u
    return ans
